openapi: 3.0.0
paths:
  /auth/signup:
    post:
      operationId: signup
      summary: Sign up
      description: Signs up as a new user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignupDto"
      responses:
        "201":
          description: The user has been signed up
        "400":
          description: Bad request. body does not contain required fields
      tags: &a1
        - Auth
  /auth/login:
    post:
      operationId: login
      summary: Login
      description: Logins an user via login/password
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginDto"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Auth"
        "400":
          description: Bad request. body does not contain required fields
        "403":
          description: Authentication failed
      tags: *a1
  /auth/refresh:
    post:
      operationId: refresh
      summary: Refresh
      description: Refreshes access/refresh tokens
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenDto"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Auth"
        "400":
          description: Bad request. body does not contain required fields
        "403":
          description: Authentication failed
      tags: *a1
  /user:
    post:
      operationId: create
      summary: Add new User
      description: Adds new User
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserDto"
      responses:
        "201":
          description: User is created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: "Bad request: body does not contain required fields"
      tags: &a2
        - User
      security: &a3
        - bearer: []
    get:
      operationId: findAll
      summary: Get list of Users
      description: Gets list of Users
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
      tags: *a2
      security: *a3
  "/user/{id}":
    get:
      operationId: findOne
      summary: Get single User by id
      description: Gets single User by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: "Bad request: id is invalid (not uuid)"
        "404":
          description: User was not found
      tags: *a2
      security: *a3
    put:
      operationId: update
      summary: Update User's information
      description: Updates User's information by UUID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePasswordDto"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: "Bad request: id is invalid (not uuid)"
        "404":
          description: User was not found
      tags: *a2
      security: *a3
    delete:
      operationId: remove
      summary: Delete User
      description: Deletes User
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "204":
          description: User deleted successfully
        "400":
          description: "Bad request: id is invalid (not uuid)"
        "404":
          description: User was not found
      tags: *a2
      security: *a3
  /track:
    post:
      operationId: create
      summary: Add new Track
      description: Adds new Track
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTrackDto"
      responses:
        "201":
          description: Track is created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Track"
        "400":
          description: "Bad request: body does not contain required fields"
      tags: &a4
        - Track
      security: &a5
        - bearer: []
    get:
      operationId: findAll
      summary: Get list of Tracks
      description: Gets list of Tracks
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Track"
      tags: *a4
      security: *a5
  "/track/{id}":
    get:
      operationId: findOne
      summary: Get single Track by id
      description: Gets single Track by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Track"
        "400":
          description: "Bad request: id is invalid (not uuid)"
        "404":
          description: Track was not found
      tags: *a4
      security: *a5
    put:
      operationId: update
      summary: Update Track's information
      description: Updates Track's information by UUID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTrackDto"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Track"
        "400":
          description: "Bad request: id is invalid (not uuid)"
        "404":
          description: Track was not found
      tags: *a4
      security: *a5
    delete:
      operationId: remove
      summary: Delete Track
      description: Deletes Track
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "204":
          description: Track deleted successfully
        "400":
          description: "Bad request: id is invalid (not uuid)"
        "404":
          description: Track was not found
      tags: *a4
      security: *a5
  /artist:
    post:
      operationId: create
      summary: Add new Artist
      description: Adds new Artist
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateArtistDto"
      responses:
        "201":
          description: Artist is created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Artist"
        "400":
          description: "Bad request: body does not contain required fields"
      tags: &a6
        - Artist
      security: &a7
        - bearer: []
    get:
      operationId: findAll
      summary: Get list of Artists
      description: Gets list of Artists
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Artist"
      tags: *a6
      security: *a7
  "/artist/{id}":
    get:
      operationId: findOne
      summary: Get single Artist by id
      description: Gets single Artist by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Artist"
        "400":
          description: "Bad request: id is invalid (not uuid)"
        "404":
          description: Artist was not found
      tags: *a6
      security: *a7
    put:
      operationId: update
      summary: Update Artist's information
      description: Updates Artist's information by UUID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateArtistDto"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Artist"
        "400":
          description: "Bad request: id is invalid (not uuid)"
        "404":
          description: Artist was not found
      tags: *a6
      security: *a7
    delete:
      operationId: remove
      summary: Delete Artist
      description: Deletes Artist
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "204":
          description: Artist deleted successfully
        "400":
          description: "Bad request: id is invalid (not uuid)"
        "404":
          description: Artist was not found
      tags: *a6
      security: *a7
  /album:
    post:
      operationId: create
      summary: Add new Album
      description: Adds new Album
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAlbumDto"
      responses:
        "201":
          description: Album is created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Album"
        "400":
          description: "Bad request: body does not contain required fields"
      tags: &a8
        - Album
      security: &a9
        - bearer: []
    get:
      operationId: findAll
      summary: Get list of Albums
      description: Gets list of Albums
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Album"
      tags: *a8
      security: *a9
  "/album/{id}":
    get:
      operationId: findOne
      summary: Get single Album by id
      description: Gets single Album by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Album"
        "400":
          description: "Bad request: id is invalid (not uuid)"
        "404":
          description: Album was not found
      tags: *a8
      security: *a9
    put:
      operationId: update
      summary: Update Album's information
      description: Updates Album's information by UUID
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAlbumDto"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Album"
        "400":
          description: "Bad request: id is invalid (not uuid)"
        "404":
          description: Album was not found
      tags: *a8
      security: *a9
    delete:
      operationId: remove
      summary: Delete Album
      description: Deletes Album
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "204":
          description: Album deleted successfully
        "400":
          description: "Bad request: id is invalid (not uuid)"
        "404":
          description: Album was not found
      tags: *a8
      security: *a9
  /favs:
    get:
      operationId: findAll
      summary: Get all favorites
      description: Gets all favorites movies, tracks and books
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Favorites"
      tags: &a10
        - Favs
      security: &a11
        - bearer: []
  "/favs/track/{id}":
    post:
      operationId: createTrackFav
      summary: Add track to the favorites
      description: Add track to the favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "201":
          description: Added successfully
        "400":
          description: Bad. trackId is invalid (not uuid)
        "422":
          description: Track with id doesn't exist
      tags: *a10
      security: *a11
    delete:
      operationId: removeTrackFav
      summary: Delete track from favorites
      description: Delete track from favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "204":
          description: Deleted successfully
        "400":
          description: Bad. trackId is invalid (not uuid)
        "404":
          description: Track was not found
      tags: *a10
      security: *a11
  "/favs/album/{id}":
    post:
      operationId: createAlbumFav
      summary: Add album to the favorites
      description: Add album to the favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "201":
          description: Added successfully
        "400":
          description: Bad. albumId is invalid (not uuid)
        "422":
          description: Album with id doesn't exist
      tags: *a10
      security: *a11
    delete:
      operationId: removeAlbumFav
      summary: Delete album from favorites
      description: Delete album from favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "204":
          description: Deleted successfully
        "400":
          description: Bad. albumId is invalid (not uuid)
        "404":
          description: Album was not found
      tags: *a10
      security: *a11
  "/favs/artist/{id}":
    post:
      operationId: createArtistFav
      summary: Add artist to the favorites
      description: Add artist to the favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "201":
          description: Added successfully
        "400":
          description: Bad request. artistId is invalid (not uuid)
        "422":
          description: Artist with id doesn't exist
      tags: *a10
      security: *a11
    delete:
      operationId: removeArtistFav
      summary: Delete artist from favorites
      description: Delete artist from favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "204":
          description: Deleted successfully
        "400":
          description: Bad request. artistId is invalid (not uuid)
        "404":
          description: Artist was not found
      tags: *a10
      security: *a11
info:
  title: Home Library Service
  description: Home music library service
  version: 1.0.0
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    SignupDto:
      type: object
      properties:
        login:
          type: string
        password:
          type: string
      required:
        - login
        - password
    LoginDto:
      type: object
      properties:
        login:
          type: string
        password:
          type: string
      required:
        - login
        - password
    Auth:
      type: object
      properties:
        accessToken:
          type: string
          format: JWT
        refreshToken:
          type: string
          format: JWT
      required:
        - accessToken
        - refreshToken
    RefreshTokenDto:
      type: object
      properties:
        refreshToken:
          type: string
      required:
        - refreshToken
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
        password:
          type: string
      required:
        - login
        - password
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid v4
        version:
          type: number
          minimum: 1
          example: 1
        createdAt:
          type: number
          example: 1655000000
        updatedAt:
          type: number
          example: 1655000000
        login:
          type: string
      required:
        - id
        - version
        - createdAt
        - updatedAt
        - login
    UpdatePasswordDto:
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
      required:
        - oldPassword
        - newPassword
    CreateTrackDto:
      type: object
      properties:
        name:
          type: string
        artistId:
          type: string
          nullable: true
        albumId:
          type: string
          nullable: true
        duration:
          type: number
          minimum: 1
      required:
        - name
        - artistId
        - albumId
        - duration
    Track:
      type: object
      properties:
        id:
          type: string
          format: uuid v4
        name:
          type: string
          example: The Show Must Go On
        artistId:
          type: string
          nullable: true
          format: uuid v4
        albumId:
          type: string
          nullable: true
          format: uuid v4
        duration:
          type: integer
          description: In seconds
          example: 262
          minimum: 1
      required:
        - id
        - name
        - artistId
        - albumId
        - duration
    CreateArtistDto:
      type: object
      properties:
        name:
          type: string
        grammy:
          type: boolean
      required:
        - name
        - grammy
    Artist:
      type: object
      properties:
        id:
          type: string
          format: uuid v4
        name:
          type: string
          example: Freddie Mercury
        grammy:
          type: boolean
          example: false
          default: false
      required:
        - id
        - name
        - grammy
    CreateAlbumDto:
      type: object
      properties:
        name:
          type: string
        year:
          type: number
        artistId:
          type: string
          nullable: true
      required:
        - name
        - year
        - artistId
    Album:
      type: object
      properties:
        id:
          type: string
          format: uuid v4
        name:
          type: string
          example: Innuendo
        year:
          type: integer
          example: 1991
        artistId:
          type: string
          nullable: true
          format: uuid v4
      required:
        - id
        - name
        - year
        - artistId
    Favorites:
      type: object
      properties:
        artists:
          type: array
          items:
            $ref: "#/components/schemas/Artist"
        albums:
          type: array
          items:
            $ref: "#/components/schemas/Album"
        tracks:
          type: array
          items:
            $ref: "#/components/schemas/Track"
      required:
        - artists
        - albums
        - tracks
